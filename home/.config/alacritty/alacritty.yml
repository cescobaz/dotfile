window:
  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 0
    y: 0
  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons
  decorations: none
  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Maximized
# Spaces per Tab (changes require restart)
#
# This setting defines the width of a tab in cells.
#
# Some applications, like Emacs, rely on knowing about the width of a tab.
# To prevent unexpected behavior in these applications, it's also required to
# change the `it` value in terminfo when altering this setting.
# tabspaces: 4

# Font configuration
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux/BSD) monospace
    #   - (Windows) Consolas

    # The `style` can be specified to pick a specific face.
    style: Regular

  # Bold font face
  bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.

    # The `style` can be specified to pick a specific face.
    style: Bold

  # Italic font face
  italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.

    # The `style` can be specified to pick a specific face.
    style: Italic

  # Bold italic font face
  bold_italic:
    # Font family
    #
    # If the bold italic family is not specified, it will fall back to the
    # value specified for the normal font.

    # The `style` can be specified to pick a specific face.
    style: Bold Italic

  # Point size
  size: 14.0

# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
#background_opacity: 0.9

# Colors (Tomorrow Night Bright)
colors:
  # Cursor colors
  #
  # Colors which should be used to draw the terminal cursor. If these are unset,
  # the cursor color will be the inverse of the cell color.
  cursor:
    text: "0xFFFFFF"
    cursor: "0xff0000"

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux/BSD) user login shell
#   - (Windows) powershell
shell:
  program: /bin/zsh
  args:
    - --login

mouse:
  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
# https://unix.stackexchange.com/questions/76566/where-do-i-find-a-list-of-terminal-key-codes-to-remap-shortcuts-in-bash
# use `sed -n l` to get the code: press keys then press return -> you will see octal code
key_bindings:
  - {key: V, mods: Control|Shift, action: Paste}
  - {key: C, mods: Control|Shift, action: Copy}
  - {key: Minus, mods: Control|Shift, action: DecreaseFontSize}
  - {key: Equals, mods: Control|Shift, action: IncreaseFontSize}
  - {key: Minus, mods: Control, action: DecreaseFontSize}
  - {key: Plus, mods: Control, action: IncreaseFontSize}
  - {key: F, mods: Command, action: ToggleSimpleFullscreen}
  - {key: N, mods: Command, action: SpawnNewInstance}
  - {key: A, mods: Control, chars: "\x01"}
  - {key: B, mods: Control, chars: "\x02"}
  - {key: C, mods: Control, chars: "\x03"}
  - {key: D, mods: Control, chars: "\x04"}
  - {key: E, mods: Control, chars: "\x05"}
  - {key: F, mods: Control, chars: "\x06"}
  - {key: G, mods: Control, chars: "\x07"}
  - {key: H, mods: Control, chars: "\x08"}
  - {key: I, mods: Control, chars: "\x09"}
  - {key: J, mods: Control, chars: "\x0A"}
  - {key: K, mods: Control, chars: "\x0B"}
  - {key: L, mods: Control, chars: "\x0C"}
  - {key: M, mods: Control, chars: "\x0D"}
  - {key: N, mods: Control, chars: "\x0E"}
  - {key: O, mods: Control, chars: "\x0F"}
  - {key: P, mods: Control, chars: "\x10"}
  - {key: Q, mods: Control, chars: "\x11"}
  - {key: R, mods: Control, chars: "\x12"}
  - {key: S, mods: Control, chars: "\x13"}
  - {key: T, mods: Control, chars: "\x14"}
  - {key: U, mods: Control, chars: "\x15"}
  - {key: V, mods: Control, chars: "\x16"}
  - {key: W, mods: Control, chars: "\x17"}
  - {key: X, mods: Control, chars: "\x18"}
  - {key: Y, mods: Control, chars: "\x19"}
  - {key: Z, mods: Control, chars: "\x1A"}
  - {key: Key6, mods: Control, chars: "\x1E"}
  - {key: LBracket, mods: Alt|Shift, chars: "\x7B"}
  - {key: RBracket, mods: Alt|Shift, chars: "\x7D"}
  - {key: LBracket, mods: Alt, chars: "\x5B"}
  - {key: RBracket, mods: Alt, chars: "\x5D"}
  - {key: Semicolon, mods: Alt, chars: "\x40"}
  - {key: Key2, mods: Alt, chars: "\x40"}
  - {key: Apostrophe, mods: Alt, chars: "\x23"}  # hashtag
  - {key: Key3, mods: Alt, chars: "\x23"}  # hashtag
  - {key: 23, mods: Alt, chars: "\x7E"}  # tilde ~
  - {key: 10, mods: Alt, chars: "\x60"}  # tilde `
