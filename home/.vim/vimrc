if filereadable($VIMRUNTIME."/defaults.vim")
  source $VIMRUNTIME/defaults.vim
elseif filereadable($VIMRUNTIME."/debian.vim")
  source $VIMRUNTIME/debian.vim
endif

set nocompatible              " be iMproved, required
filetype off                  " required
filetype plugin indent on
let g:filetype_m = "objc"

syntax on

set number
set cursorline
set wrap
set ruler

" Status bar
set laststatus=2

set showmode
set showcmd

" Highlight matching search patterns
set hlsearch
set incsearch
if has('nvim')
  set inccommand=split
endif
" Include matching uppercase words with lowercase search term
set ignorecase
" Include only uppercase words with uppercase search term
set smartcase

" Insert space characters whenever the tab key is pressed, use Ctrl-V<Tab> to
" enter real tab
set expandtab
set tabstop=2
set encoding=utf-8
set fileencoding=utf-8

set listchars=eol:$,tab:>Â·,trail:~,extends:>,precedes:<
set list

set history=10000

" Map the <Space> key to toggle a selected fold opened/closed.
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Fuzzy File search plugin (:FZF)
Plug 'junegunn/fzf'
" FZF customization on top of FZF
Plug 'junegunn/fzf.vim'
let g:fzf_layout = { 'down': '~40%' }

Plug 'chriskempson/base16-vim'

let g:EasyMotion_smartcase = 1
Plug 'https://github.com/easymotion/vim-easymotion'

" Git plugin
Plug 'https://github.com/tpope/vim-fugitive.git'

let g:vue_pre_processors = 'detect_on_enter'
let g:polyglot_disabled = ['autoindent', 'sensible']
let g:haskell_indent_disable = 1
let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_backpack = 1                " to enable highlighting of backpack keywords
Plug 'sheerun/vim-polyglot'

Plug 'udalov/kotlin-vim'

let g:ale_completion_symbols = {
\ 'text': 't',
\ 'method': 'method',
\ 'function': 'fun',
\ 'constructor': 'constructor',
\ 'field': 'field',
\ 'variable': 'var',
\ 'class': 'class',
\ 'interface': 'interface',
\ 'module': 'module',
\ 'property': 'prop',
\ 'unit': 'unit',
\ 'value': 'val',
\ 'enum': 'enum',
\ 'keyword': 'keyword',
\ 'snippet': 'snippet',
\ 'color': 'color',
\ 'file': 'file',
\ 'reference': 'ref',
\ 'folder': 'folder',
\ 'enum member': 'enum m',
\ 'constant': 'constant',
\ 'struct': 'struct',
\ 'event': 'event',
\ 'operator': 'operator',
\ 'type_parameter': 'type param',
\ '<default>': 'v'
\ }
let g:ale_completion_enabled = 0
let g:ale_linters_explicit = 1
let g:ale_open_list = 1
let g:ale_set_quickfix = 1
let g:ale_fix_on_save = 1
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 1
let g:ale_set_highlights = 1
set completeopt-=preview
Plug 'dense-analysis/ale'

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1
Plug 'cescobaz/vim-snippets'
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/.vim/plugged/vim-snippets/snippets'
"let g:neosnippet#snippets_directory='~/Projects/vim-snippets/snippets'

Plug 'tpope/vim-surround'

call plug#end()

call deoplete#custom#option('sources', {
\ '_': ['ale', 'buffer', 'tag', 'neosnippet', 'file'],
\})
call deoplete#custom#source('_',  'max_menu_width', 80)
call deoplete#custom#source('_', 'min_pattern_length', 1)
call deoplete#custom#source('_', 'smart_case', v:true)
call ale#linter#Define('haskell', {
\   'name': 'hls',
\   'lsp': 'stdio',
\   'executable': 'haskell-language-server-wrapper',
\   'command': '%e --lsp',
\   'project_root': '*.cabal',
\})
call ale#linter#Define('vlang', {
\   'name': 'vls',
\   'lsp': 'stdio',
\   'executable': 'vls',
\   'command': '%e run',
\   'project_root': '.',
\})
function! FormatV(buffer) abort
    return {
    \   'command': '(cat - > tmp.v && v fmt tmp.v && rm tmp.v)'
    \}
endfunction

execute ale#fix#registry#Add('vfmt', 'FormatV', ['vlang'], 'vfmt for v')

nmap <C-x><C-p> "*p
nmap <C-x><C-y> "*y
nmap <C-x>c :noh<CR>

map s <Plug>(easymotion-bd-f)
map <space>ff :Files<CR>
map <space>fg :Rg<CR>
map <space>fF :Rg<CR>
map <space>fb :Buffer<CR>
map <space>fB :BLines<CR>
map <space>fc :History:<CR>
map <space>fh :History/<CR>

imap <C-j>     <Plug>(neosnippet_expand_or_jump)
smap <C-j>     <Plug>(neosnippet_expand_or_jump)
xmap <C-j>     <Plug>(neosnippet_expand_target)


nmap <space>l :ALEFix<CR>
nmap gD :ALEDetail<CR>
nmap K :ALEHover<CR>
nmap gd :ALEGoToDefinition<CR>

command BO :%bd|e#

" the following will set colorscheme by base16-shell
if exists('$BASE16_THEME')
      \ && (!exists('g:colors_name') || g:colors_name != 'base16-$BASE16_THEME')
    let base16colorspace=256
    colorscheme base16-$BASE16_THEME
endif

function! LinterErrors() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    return l:all_errors == 0 ? '' : printf(
    \   ' %dE ',
    \   all_errors
    \)
endfunction

function! LinterWarnings() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:all_non_errors == 0 ? '' : printf(
    \   ' %dW ',
    \   all_non_errors,
    \)
endfunction

set statusline=%1*\ %f\ %2*\ %n%m%r%h%w
set statusline+=\ %4*\%{LinterWarnings()}%2*
set statusline+=\ %3*\%{LinterErrors()}%2*%=
set statusline+=\ %5*\%Y
set statusline+=\ %2*\ %{strlen(&fenc)?&fenc:'none'}[%{&ff}]
set statusline+=\ %2*\ %3p%%\ %4l/%4L\ %3v
set statusline+=%{'\ '}
highlight User1 ctermbg=03 ctermfg=18
highlight User2 ctermbg=18 ctermfg=07
highlight User3 ctermbg=01 ctermfg=18
highlight User4 ctermbg=03 ctermfg=18
highlight User5 ctermbg=18 ctermfg=03

highlight Search ctermbg=02 ctermfg=18

highlight LineNr ctermfg=07 ctermbg=18
highlight CursorLineNr ctermfg=18 ctermbg=03
highlight Cursor ctermfg=18 ctermbg=03
highlight lCursor ctermfg=18 ctermbg=03

highlight ALEError ctermbg=01 ctermfg=07
highlight ALEWarning ctermbg=03 ctermfg=18
highlight ALEInfo ctermbg=04 ctermfg=18
highlight ALEStyleError ctermbg=01 ctermfg=07
highlight ALEStyleWarning ctermbg=03 ctermfg=18

