source $VIMRUNTIME/defaults.vim

set nocompatible              " be iMproved, required
filetype off                  " required

filetype plugin indent on
syntax on

set number
set wrap

" Status bar
set laststatus=2

set showmode
set showcmd

" Highlight matching search patterns
set hlsearch
" Include matching uppercase words with lowercase search term
set ignorecase
" Include only uppercase words with uppercase search term
set smartcase

" Insert space characters whenever the tab key is pressed, use Ctrl-V<Tab> to
" enter real tab
set expandtab
set tabstop=2
set encoding=utf-8
set fileencoding=utf-8

:set listchars=eol:$,tab:>·,trail:~,extends:>,precedes:<,space:␣
:set list

" Map the <Space> key to toggle a selected fold opened/closed.
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-obsession'

" Fuzzy File search plugin and shell command
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

let g:EasyMotion_smartcase = 1
Plug 'https://github.com/easymotion/vim-easymotion'

" Collection of best vim colorscheme
" angr
" challenger_deep, alto contrasto
" happy_haking, molto clean
" paper_color, pulito, semplice e colorato
" hybrid_material, non male, semplice
Plug 'https://github.com/rafi/awesome-vim-colorschemes.git'

" Git plugin
Plug 'https://github.com/tpope/vim-fugitive.git'

let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1
Plug 'sheerun/vim-polyglot'

Plug 'udalov/kotlin-vim'

let g:ale_completion_enabled = 0
let g:ale_linters_explicit = 1
let g:ale_open_list = 1
let g:ale_fix_on_save = 1
let g:ale_close_preview_on_insert = 1
Plug 'dense-analysis/ale'

Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
let g:deoplete#enable_at_startup = 1

call plug#end()

call deoplete#custom#option('sources', {
\ '_': ['ale', 'buffer', 'tag', 'file'],
\})
call deoplete#custom#source('_',  'max_menu_width', 80)
call deoplete#custom#source('_', 'min_pattern_length', 1)

nmap <C-x><C-p> "*p
nmap <C-x><C-y> "*y

map s <Plug>(easymotion-bd-f)
map <C-p> :Files<CR>
map <C-x><C-f> :Files<CR>
map <C-x>f :Rg<CR>
map <C-x><C-b> :Buffer<CR>
map <C-x>b :BLines<CR>

nmap <C-x><C-l> :ALEFix<CR>
nmap <C-x><C-i> :ALEDetail<CR>
nmap <C-x><C-h> :ALEHover<CR>
nmap gt :ALEGoToDefinition<CR>

function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction

" Set status line display
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ [%{LinterStatus()}]

colorscheme hybrid_material
