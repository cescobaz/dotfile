source $VIMRUNTIME/defaults.vim

set nocompatible              " be iMproved, required
filetype off                  " required

filetype plugin indent on
syntax on

set number
set wrap

" Status bar
set laststatus=2

set showmode
set showcmd

" Highlight matching search patterns
set hlsearch
" Include matching uppercase words with lowercase search term
set ignorecase
" Include only uppercase words with uppercase search term
set smartcase

" Insert space characters whenever the tab key is pressed, use Ctrl-V<Tab> to
" enter real tab
set expandtab
set tabstop=2
set encoding=utf-8
set fileencoding=utf-8

:set listchars=eol:$,tab:>Â·,trail:~,extends:>,precedes:<
:set list

" Map the <Space> key to toggle a selected fold opened/closed.
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-obsession'

" Fuzzy File search plugin and shell command
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

let g:EasyMotion_smartcase = 1
Plug 'https://github.com/easymotion/vim-easymotion'

Plug 'chriskempson/base16-vim'
let base16colorspace=256

" Git plugin
Plug 'https://github.com/tpope/vim-fugitive.git'

Plug 'sheerun/vim-polyglot'

Plug 'udalov/kotlin-vim'

let g:ale_completion_enabled = 0
let g:ale_linters_explicit = 1
let g:ale_open_list = 1
let g:ale_fix_on_save = 1
let g:ale_close_preview_on_insert = 1
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_set_highlights = 1
Plug 'dense-analysis/ale'

Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
let g:deoplete#enable_at_startup = 1

"""""""""""""""""""""""""""""""" ultisnips """""""""""""""""""""""
" Track the engine.
Plug 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
"""""""""""""""""""""""""""""" """""""""""""""""""""""""""""""""""

call plug#end()

call deoplete#custom#option('sources', {
\ '_': ['ale', 'buffer', 'tag', 'file'],
\})
call deoplete#custom#source('_',  'max_menu_width', 80)
call deoplete#custom#source('_', 'min_pattern_length', 1)

nmap <C-x><C-p> "*p
nmap <C-x><C-y> "*y

map s <Plug>(easymotion-bd-f)
map <C-p> :Files<CR>
map <C-x><C-f> :Files<CR>
map <C-x>f :Rg<CR>
map <C-x><C-b> :Buffer<CR>
map <C-x>b :BLines<CR>
" commands history
map <C-x>hc :History:<CR>
" search history
map <C-x>hs :History/<CR>

nmap <C-x><C-l> :ALEFix<CR>
nmap <C-x><C-i> :ALEDetail<CR>
nmap <C-x><C-h> :ALEHover<CR>
nmap gt :ALEGoToDefinition<CR>

" the following will set colorscheme by base16-shell
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
else
  colorscheme base16-default-dark
endif

function! LinterErrors() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    return l:all_errors == 0 ? '' : printf(
    \   ' %dE ',
    \   all_errors
    \)
endfunction

function! LinterWarnings() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:all_non_errors == 0 ? '' : printf(
    \   ' %dW ',
    \   all_non_errors,
    \)
endfunction

set statusline=%1*\ %f\ %0*%m%r%h%w
set statusline+=\ %4*\%{LinterWarnings()}%0*
set statusline+=\ %3*\%{LinterErrors()}%0*%=
set statusline+=\ %Y
set statusline+=\ %2*\ %{strlen(&fenc)?&fenc:'none'}[%{&ff}]
set statusline+=\ %1*\ %3p%%\ %4l/%4L\ %3v
set statusline+=%{'\ '}
highlight User1 ctermbg=2 ctermfg=18
highlight User2 ctermbg=18
highlight User3 ctermbg=01 ctermfg=18
highlight User4 ctermbg=03 ctermfg=18

highlight ALEError ctermbg=1 ctermfg=18
highlight ALEWarning ctermbg=3 ctermfg=18
highlight ALEInfo ctermbg=4 ctermfg=18
highlight ALEStyleError ctermbg=5 ctermfg=18
highlight ALEStyleWarning ctermbg=3 ctermfg=18
